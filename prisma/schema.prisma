generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INVESTOR
}

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  hashedPassword String
  name           String
  role           Role        @default(INVESTOR)
  portfolios     Portfolio[]

  @@map("user")
}

model Portfolio {
  id       Int       @id @default(autoincrement())
  name     String
  compound Boolean   @default(false)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  deals    Deal[]
  deposits Deposit[]
  cashouts Cashout[]

  @@map("portfolio")
}

enum StockType {
  SHARE
  BOND
}

enum DealType {
  BUY
  SELL
}

model Deal {
  id          Int       @id @default(autoincrement())
  securityId  Int
  amount      Int
  price       Decimal
  type        DealType
  date        DateTime
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId Int

  @@map("deal")
}

enum MoexEngine {
  stock
  currency
}

enum MoexMarket {
  shares
  bonds
}

enum MoexBoard {
  TQBR // Т+: Акции и ДР - безадрес.
}

enum MoexStockType {
  stock_index_if // 'iNAV облигаций',
  common_share // 'акция обыкновенная',
  preferred_share // 'акция привелигированная',
  exchange_bond // 'облигация',
  corporate_bond // 'корпоративная облигация',
  ofz_bond // 'ОФЗ'
  futures // 'фьючерс',
  public_ppif // 'публичный ПИФ',
  exchange_ppif // 'биржевой ПИФ',
  stock_index // 'индекс'
}

model MoexSecurities {
  id        Int           @id @default(autoincrement())
  ticker    String        @unique
  name      String
  shortName String
  engine    MoexEngine
  market    MoexMarket
  board     MoexBoard
  moexType  MoexStockType
  stockType StockType

  @@map("moex_securities")
}

model Deposit {
  id          Int       @id @default(autoincrement())
  amount      Int
  date        DateTime  @db.Date
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId Int

  @@map("deposit")
}

model Cashout {
  id          Int       @id @default(autoincrement())
  amount      Int
  date        DateTime  @db.Date
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId Int

  @@map("cashout")
}
